"""script run by Makefile clean command

Does two things:
* remove temporary config.toml files created be the 'rerun_prep.py' scripts
* remove `prep`d (prepared) datasets and results created with those datasets,
  both of which were generated by the temporary config.toml files

all the setup configs send output to one of two places:
for any prep command, the output goes to some child directory of ./tests/test_data/prep
for any command run with a `prep`d dataset, the output goes to some child dir of ./tests/test_data/results

examples:
    when we run `vak prep tmp_setup_train_audio_wav_annot_koumura.toml`
    the `prep`d dataset will be in a new directory created in
    `./tests/test_data/prep/train/audio_wav_annot_koumura`

    when we run `vak train tmp_setup_train_audio_wav_annot_koumura.toml`
    it will use the `prep`d dataset csv that's now in
    `prep/train/audio_wav_annot_koumura`, that the temporary config.toml points to,
    and the results will go to a new directory created in
    `./tests/test_data/results/train/audio_wav_annot_koumura`

The prep and results directories that get created for each run are the ones we need to clean up
and regenerate when we run the setup scripts again.
To do so we iterate through the constants defined below.

The constants are:
- TOP_LEVEL_DIRS
    name of sub-directories in .tests/test_data that correspond to
    either 'prep'd datasets or `results` generated from those `prep`d datasets
- COMMAND_DIRS
    names of sub-sub-directories in ./tests/test_data/$TOP_LEVEL_DIRS that correspond to cli commands;
    e.g., dataset from running `vak prep $A_TRAIN_CONFIG.TOML` will be in
- DATA_DIRS
    names of "subsub"directories in ./tests/test_data/$COMMAND that correspond to toy test data sets;
    those sub-directories contain test data generated by $COMMAND using the specified toy test data set

In other words, the parent directory for all the generated directories we need to remove
will have a path of the form: `./tests/test_data/$TOP_LEVEL_DIRS/COMMAND_DIRS/DATA_DIRS`.
For example:
The prep`d dataset from running `vak prep $AUDIO_CBIN_ANNOT_NOTMAT_CONFIG.TOML` will be in
`./tests/test_data/prep/train/audio_cbin_annot_notmat`
and corresponding results will be in
`./tests/test_data/results/train/audio_cbin_annot_notmat`
The directories will have names with timestamps like `prep_20201015_1115`.
Those are the generated directories we want to remove.
"""
from pathlib import Path
import shutil

HERE = Path(__file__).parent
TESTS_ROOT = HERE.joinpath('..')
TEST_DATA_ROOT = TESTS_ROOT.joinpath('test_data')

TOP_LEVEL_DIRS = [
    'prep',
    'results',
]

COMMAND_DIRS = [
    'learncurve',
    'predict',
    'train',
]

DATA_DIRS = [
    'audio_cbin_annot_notmat',
    'audio_wav_annot_koumura',
    'spect_mat_annot_yarden',
]


def main():
    """cleans up everything generated by running setup scripts"""
    # remove temporary setup configs
    test_configs = TEST_DATA_ROOT.joinpath('configs').glob('test*toml')
    for test_config in test_configs:
        test_config.unlink()

    # remove all the generated sub-sub-sub-directories
    # for each combination of $COMMAND_DIR/$DATA_DIR that exists
    # (which would originally have been generated by setup scripts)
    for command_dir in COMMAND_DIRS:
        for top_level_dir in TOP_LEVEL_DIRS:
            for data_dir in DATA_DIRS:
                path_to_clean = TEST_DATA_ROOT / top_level_dir / command_dir / data_dir
                if path_to_clean.exists():
                    subdirs = [dir_ for dir_ in sorted(path_to_clean.iterdir()) if dir_.is_dir()]
                    for subdir in subdirs:
                        shutil.rmtree(subdir)
                    csvs = sorted(path_to_clean.glob('*.csv'))
                    logs = sorted(path_to_clean.glob('*.log'))
                    for file in csvs + logs:
                        file.unlink()


if __name__ == '__main__':
    main()
